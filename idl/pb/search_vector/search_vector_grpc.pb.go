// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: search_vector.proto

package search_vector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchVectorServiceClient is the client API for SearchVectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchVectorServiceClient interface {
	SearchVector(ctx context.Context, in *SearchVectorRequest, opts ...grpc.CallOption) (*SearchVectorResponse, error)
}

type searchVectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchVectorServiceClient(cc grpc.ClientConnInterface) SearchVectorServiceClient {
	return &searchVectorServiceClient{cc}
}

func (c *searchVectorServiceClient) SearchVector(ctx context.Context, in *SearchVectorRequest, opts ...grpc.CallOption) (*SearchVectorResponse, error) {
	out := new(SearchVectorResponse)
	err := c.cc.Invoke(ctx, "/SearchVectorService/SearchVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchVectorServiceServer is the server API for SearchVectorService service.
// All implementations must embed UnimplementedSearchVectorServiceServer
// for forward compatibility
type SearchVectorServiceServer interface {
	SearchVector(context.Context, *SearchVectorRequest) (*SearchVectorResponse, error)
	mustEmbedUnimplementedSearchVectorServiceServer()
}

// UnimplementedSearchVectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchVectorServiceServer struct {
}

func (UnimplementedSearchVectorServiceServer) SearchVector(context.Context, *SearchVectorRequest) (*SearchVectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVector not implemented")
}
func (UnimplementedSearchVectorServiceServer) mustEmbedUnimplementedSearchVectorServiceServer() {}

// UnsafeSearchVectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchVectorServiceServer will
// result in compilation errors.
type UnsafeSearchVectorServiceServer interface {
	mustEmbedUnimplementedSearchVectorServiceServer()
}

func RegisterSearchVectorServiceServer(s grpc.ServiceRegistrar, srv SearchVectorServiceServer) {
	s.RegisterService(&SearchVectorService_ServiceDesc, srv)
}

func _SearchVectorService_SearchVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchVectorServiceServer).SearchVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchVectorService/SearchVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchVectorServiceServer).SearchVector(ctx, req.(*SearchVectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchVectorService_ServiceDesc is the grpc.ServiceDesc for SearchVectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchVectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SearchVectorService",
	HandlerType: (*SearchVectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchVector",
			Handler:    _SearchVectorService_SearchVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search_vector.proto",
}
