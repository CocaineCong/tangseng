// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mapreduce.proto

package mapreduce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapReduceServiceClient is the client API for MapReduceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapReduceServiceClient interface {
	MasterAssignTask(ctx context.Context, in *MapReduceTask, opts ...grpc.CallOption) (*MapReduceTask, error)
	MasterTaskCompleted(ctx context.Context, in *MapReduceTask, opts ...grpc.CallOption) (*MasterTaskCompletedResp, error)
}

type mapReduceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapReduceServiceClient(cc grpc.ClientConnInterface) MapReduceServiceClient {
	return &mapReduceServiceClient{cc}
}

func (c *mapReduceServiceClient) MasterAssignTask(ctx context.Context, in *MapReduceTask, opts ...grpc.CallOption) (*MapReduceTask, error) {
	out := new(MapReduceTask)
	err := c.cc.Invoke(ctx, "/MapReduceService/MasterAssignTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceServiceClient) MasterTaskCompleted(ctx context.Context, in *MapReduceTask, opts ...grpc.CallOption) (*MasterTaskCompletedResp, error) {
	out := new(MasterTaskCompletedResp)
	err := c.cc.Invoke(ctx, "/MapReduceService/MasterTaskCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapReduceServiceServer is the server API for MapReduceService service.
// All implementations must embed UnimplementedMapReduceServiceServer
// for forward compatibility
type MapReduceServiceServer interface {
	MasterAssignTask(context.Context, *MapReduceTask) (*MapReduceTask, error)
	MasterTaskCompleted(context.Context, *MapReduceTask) (*MasterTaskCompletedResp, error)
	mustEmbedUnimplementedMapReduceServiceServer()
}

// UnimplementedMapReduceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMapReduceServiceServer struct {
}

func (UnimplementedMapReduceServiceServer) MasterAssignTask(context.Context, *MapReduceTask) (*MapReduceTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterAssignTask not implemented")
}
func (UnimplementedMapReduceServiceServer) MasterTaskCompleted(context.Context, *MapReduceTask) (*MasterTaskCompletedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterTaskCompleted not implemented")
}
func (UnimplementedMapReduceServiceServer) mustEmbedUnimplementedMapReduceServiceServer() {}

// UnsafeMapReduceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapReduceServiceServer will
// result in compilation errors.
type UnsafeMapReduceServiceServer interface {
	mustEmbedUnimplementedMapReduceServiceServer()
}

func RegisterMapReduceServiceServer(s grpc.ServiceRegistrar, srv MapReduceServiceServer) {
	s.RegisterService(&MapReduceService_ServiceDesc, srv)
}

func _MapReduceService_MasterAssignTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapReduceTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServiceServer).MasterAssignTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MapReduceService/MasterAssignTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServiceServer).MasterAssignTask(ctx, req.(*MapReduceTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduceService_MasterTaskCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapReduceTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServiceServer).MasterTaskCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MapReduceService/MasterTaskCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServiceServer).MasterTaskCompleted(ctx, req.(*MapReduceTask))
	}
	return interceptor(ctx, in, info, handler)
}

// MapReduceService_ServiceDesc is the grpc.ServiceDesc for MapReduceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapReduceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MapReduceService",
	HandlerType: (*MapReduceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MasterAssignTask",
			Handler:    _MapReduceService_MasterAssignTask_Handler,
		},
		{
			MethodName: "MasterTaskCompleted",
			Handler:    _MapReduceService_MasterTaskCompleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapreduce.proto",
}
