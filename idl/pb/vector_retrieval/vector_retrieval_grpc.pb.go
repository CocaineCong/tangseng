// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: vector_retrieval.proto

package vector_retrieval

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VectorRetrievalClient is the client API for VectorRetrieval service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorRetrievalClient interface {
	Search(ctx context.Context, in *VectorReq, opts ...grpc.CallOption) (*VectorResp, error)
}

type vectorRetrievalClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorRetrievalClient(cc grpc.ClientConnInterface) VectorRetrievalClient {
	return &vectorRetrievalClient{cc}
}

func (c *vectorRetrievalClient) Search(ctx context.Context, in *VectorReq, opts ...grpc.CallOption) (*VectorResp, error) {
	out := new(VectorResp)
	err := c.cc.Invoke(ctx, "/VectorRetrieval/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorRetrievalServer is the server API for VectorRetrieval service.
// All implementations must embed UnimplementedVectorRetrievalServer
// for forward compatibility
type VectorRetrievalServer interface {
	Search(context.Context, *VectorReq) (*VectorResp, error)
	mustEmbedUnimplementedVectorRetrievalServer()
}

// UnimplementedVectorRetrievalServer must be embedded to have forward compatible implementations.
type UnimplementedVectorRetrievalServer struct {
}

func (UnimplementedVectorRetrievalServer) Search(context.Context, *VectorReq) (*VectorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedVectorRetrievalServer) mustEmbedUnimplementedVectorRetrievalServer() {}

// UnsafeVectorRetrievalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorRetrievalServer will
// result in compilation errors.
type UnsafeVectorRetrievalServer interface {
	mustEmbedUnimplementedVectorRetrievalServer()
}

func RegisterVectorRetrievalServer(s grpc.ServiceRegistrar, srv VectorRetrievalServer) {
	s.RegisterService(&VectorRetrieval_ServiceDesc, srv)
}

func _VectorRetrieval_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorRetrievalServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VectorRetrieval/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorRetrievalServer).Search(ctx, req.(*VectorReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VectorRetrieval_ServiceDesc is the grpc.ServiceDesc for VectorRetrieval service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VectorRetrieval_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VectorRetrieval",
	HandlerType: (*VectorRetrievalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _VectorRetrieval_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vector_retrieval.proto",
}
