// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: index_platform.proto

package index_platform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexPlatformServiceClient is the client API for IndexPlatformService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexPlatformServiceClient interface {
	BuildIndexService(ctx context.Context, in *BuildIndexReq, opts ...grpc.CallOption) (*BuildIndexResp, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (IndexPlatformService_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (IndexPlatformService_DownloadFileClient, error)
}

type indexPlatformServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexPlatformServiceClient(cc grpc.ClientConnInterface) IndexPlatformServiceClient {
	return &indexPlatformServiceClient{cc}
}

func (c *indexPlatformServiceClient) BuildIndexService(ctx context.Context, in *BuildIndexReq, opts ...grpc.CallOption) (*BuildIndexResp, error) {
	out := new(BuildIndexResp)
	err := c.cc.Invoke(ctx, "/IndexPlatformService/BuildIndexService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexPlatformServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (IndexPlatformService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndexPlatformService_ServiceDesc.Streams[0], "/IndexPlatformService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexPlatformServiceUploadFileClient{stream}
	return x, nil
}

type IndexPlatformService_UploadFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type indexPlatformServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *indexPlatformServiceUploadFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *indexPlatformServiceUploadFileClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indexPlatformServiceClient) DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (IndexPlatformService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndexPlatformService_ServiceDesc.Streams[1], "/IndexPlatformService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexPlatformServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndexPlatformService_DownloadFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type indexPlatformServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *indexPlatformServiceDownloadFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IndexPlatformServiceServer is the server API for IndexPlatformService service.
// All implementations must embed UnimplementedIndexPlatformServiceServer
// for forward compatibility
type IndexPlatformServiceServer interface {
	BuildIndexService(context.Context, *BuildIndexReq) (*BuildIndexResp, error)
	UploadFile(IndexPlatformService_UploadFileServer) error
	DownloadFile(*FileRequest, IndexPlatformService_DownloadFileServer) error
	mustEmbedUnimplementedIndexPlatformServiceServer()
}

// UnimplementedIndexPlatformServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndexPlatformServiceServer struct {
}

func (UnimplementedIndexPlatformServiceServer) BuildIndexService(context.Context, *BuildIndexReq) (*BuildIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildIndexService not implemented")
}
func (UnimplementedIndexPlatformServiceServer) UploadFile(IndexPlatformService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedIndexPlatformServiceServer) DownloadFile(*FileRequest, IndexPlatformService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedIndexPlatformServiceServer) mustEmbedUnimplementedIndexPlatformServiceServer() {}

// UnsafeIndexPlatformServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexPlatformServiceServer will
// result in compilation errors.
type UnsafeIndexPlatformServiceServer interface {
	mustEmbedUnimplementedIndexPlatformServiceServer()
}

func RegisterIndexPlatformServiceServer(s grpc.ServiceRegistrar, srv IndexPlatformServiceServer) {
	s.RegisterService(&IndexPlatformService_ServiceDesc, srv)
}

func _IndexPlatformService_BuildIndexService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexPlatformServiceServer).BuildIndexService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexPlatformService/BuildIndexService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexPlatformServiceServer).BuildIndexService(ctx, req.(*BuildIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexPlatformService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IndexPlatformServiceServer).UploadFile(&indexPlatformServiceUploadFileServer{stream})
}

type IndexPlatformService_UploadFileServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type indexPlatformServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *indexPlatformServiceUploadFileServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *indexPlatformServiceUploadFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IndexPlatformService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexPlatformServiceServer).DownloadFile(m, &indexPlatformServiceDownloadFileServer{stream})
}

type IndexPlatformService_DownloadFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type indexPlatformServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *indexPlatformServiceDownloadFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// IndexPlatformService_ServiceDesc is the grpc.ServiceDesc for IndexPlatformService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexPlatformService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IndexPlatformService",
	HandlerType: (*IndexPlatformServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildIndexService",
			Handler:    _IndexPlatformService_BuildIndexService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _IndexPlatformService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _IndexPlatformService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "index_platform.proto",
}
